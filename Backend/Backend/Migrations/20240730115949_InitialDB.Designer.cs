// <auto-generated />
using System;
using Backend;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240730115949_InitialDB")]
    partial class InitialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Payment")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Backend.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ordered")
                        .HasColumnType("bit");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 1,
                            ServiceType = "Dent and Repair",
                            Title = "Body Shop"
                        },
                        new
                        {
                            Id = 2,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 1,
                            ServiceType = "Bumper Repair",
                            Title = "Body Shop"
                        },
                        new
                        {
                            Id = 3,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 1,
                            ServiceType = "Accidental Repair",
                            Title = "Body Shop"
                        },
                        new
                        {
                            Id = 4,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 1,
                            ServiceType = "Scratch Removal",
                            Title = "Body Shop"
                        },
                        new
                        {
                            Id = 5,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 2,
                            ServiceType = "9H Ceramic Coating",
                            Title = "Detailing"
                        },
                        new
                        {
                            Id = 6,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 2,
                            ServiceType = "Rubbing",
                            Title = "Detailing"
                        },
                        new
                        {
                            Id = 7,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 2,
                            ServiceType = "Waxing",
                            Title = "Detailing"
                        },
                        new
                        {
                            Id = 8,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 2,
                            ServiceType = "Polishing",
                            Title = "Detailing"
                        },
                        new
                        {
                            Id = 9,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 2,
                            ServiceType = "Deep Interior Cleaning",
                            Title = "Detailing"
                        },
                        new
                        {
                            Id = 10,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 2,
                            ServiceType = "Exterior Cleaning",
                            Title = "Detailing"
                        },
                        new
                        {
                            Id = 12,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 2,
                            ServiceType = "Paint Enchancement",
                            Title = "Detailing"
                        },
                        new
                        {
                            Id = 13,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 2,
                            ServiceType = "Windshield Coating",
                            Title = "Detailing"
                        },
                        new
                        {
                            Id = 14,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 3,
                            ServiceType = "Engine Repairs",
                            Title = "Common Repairs"
                        },
                        new
                        {
                            Id = 15,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 3,
                            ServiceType = "Brake Repairs",
                            Title = "Common Repairs"
                        },
                        new
                        {
                            Id = 16,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 3,
                            ServiceType = "Suspension Repairs",
                            Title = "Common Repairs"
                        },
                        new
                        {
                            Id = 17,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 3,
                            ServiceType = "AC Repair",
                            Title = "Common Repairs"
                        },
                        new
                        {
                            Id = 18,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 3,
                            ServiceType = "Transmission and Clutch Repairs",
                            Title = "Common Repairs"
                        },
                        new
                        {
                            Id = 19,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 3,
                            ServiceType = "Electrical Repairs",
                            Title = "Common Repairs"
                        },
                        new
                        {
                            Id = 20,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 4,
                            ServiceType = "Troubleshooting",
                            Title = "Scanning and Diagnostics"
                        },
                        new
                        {
                            Id = 21,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 4,
                            ServiceType = "System Errors",
                            Title = "Scanning and Diagnostics"
                        },
                        new
                        {
                            Id = 22,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 4,
                            ServiceType = "79 Point Inspection",
                            Title = "Scanning and Diagnostics"
                        },
                        new
                        {
                            Id = 23,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 5,
                            ServiceType = "Battery Replacement",
                            Title = "Value Added Services"
                        },
                        new
                        {
                            Id = 24,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 5,
                            ServiceType = "Tyre Replacement",
                            Title = "Value Added Services"
                        },
                        new
                        {
                            Id = 25,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 5,
                            ServiceType = "Insurance Renewal",
                            Title = "Value Added Services"
                        },
                        new
                        {
                            Id = 26,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 5,
                            ServiceType = "Customization",
                            Title = "Value Added Services"
                        },
                        new
                        {
                            Id = 27,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 5,
                            ServiceType = "Car Accessories",
                            Title = "Value Added Services"
                        },
                        new
                        {
                            Id = 28,
                            Ordered = false,
                            Price = 1000f,
                            ServiceCategoryId = 5,
                            ServiceType = "Pre-owned Cars",
                            Title = "Value Added Services"
                        });
                });

            modelBuilder.Entity("Backend.Entities.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Periodic Maintenance Service",
                            SubCategory = "Body Shop"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Periodic Maintenance Service",
                            SubCategory = "Detailing"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Periodic Maintenance Service",
                            SubCategory = "Common Repairs"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Periodic Maintenance Service",
                            SubCategory = "Scanning and Diagnostics"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Periodic Maintenance Service",
                            SubCategory = "Value Added Services"
                        });
                });

            modelBuilder.Entity("Backend.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountStatus = "ACTIVE",
                            CreatedOn = new DateTime(2024, 7, 22, 13, 28, 12, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            LastName = "",
                            MobileNumber = "1234567890",
                            Password = "admin2000",
                            UserType = "ADMIN"
                        });
                });

            modelBuilder.Entity("Backend.Entities.Order", b =>
                {
                    b.HasOne("Backend.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Entities.Service", b =>
                {
                    b.HasOne("Backend.Entities.ServiceCategory", "ServiceCategory")
                        .WithMany()
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceCategory");
                });
#pragma warning restore 612, 618
        }
    }
}
